##############################################################################
## Provision cicd
## This role executes much of the needed functionality to provision an
## application using an Ansible Playbook Bundle.  Included in the comments
## below are some sample resources for getting started deploying an application
## to OpenShift.
##############################################################################
- name: Login As Super User
  command: "oc login -u {{ admin_user }} -p {{ admin_password }}"

- name: get APB service account
  shell: >
     oc get sa -n "{{ namespace }}" | grep apb | sed 's/\|/ /' | awk '{print $1}'
  register: apb_sa

- name: Add Privileged Policy
  shell: >
     oc adm policy add-scc-to-user privileged -z "{{ apb_sa.stdout }}" -n "{{ namespace }}"

- name: Add cluster role
  shell: >
     oc adm policy add-cluster-role-to-user cluster-admin system:serviceaccount:"{{namespace}}":"{{ apb_sa.stdout }}"

- name: create build project
  openshift_v1_project:
    name: "{{ build_namespace }}"
    state: present

- name: create test project
  openshift_v1_project:
    name: "{{ test_namespace }}"
    state: present

- name: create prod project
  openshift_v1_project:
    name: "{{ prod_namespace }}"
    state: present

### Deploy Jenkins
- name: deploy Jenkins
  shell: >
     oc new-app -n "{{ build_namespace }}" --template=jenkins-persistent --name=jenkins -p MEMORY_LIMIT=1Gi

### Deploy Nexus
- name: create nexus volume claim
  k8s_v1_persistent_volume_claim:
    name: nexus-volume-1
    namespace: '{{ build_namespace }}'
    state: present
    access_modes:
      - ReadWriteOnce
    resources_requests:
      storage: 5Gi

- name: create nexus service
  k8s_v1_service:
    name: nexus
    namespace: '{{ build_namespace }}'
    labels:
      app: nexus
      service: nexus
    selector:
      app: nexus
      service: nexus
    ports:
      - name: 8081-tcp
        port: 8081
        target_port: 8081

- name: create nexus deployment config
  openshift_v1_deployment_config:
    name: nexus
    namespace: '{{ build_namespace }}'
    labels:
      app: nexus
      service: nexus
    replicas: 1
    selector:
      app: nexus
      service: nexus
    spec_template_metadata_labels:
      app: nexus
      service: nexus
    containers:
    - env:
      image: docker.io/sonatype/nexus3:latest
      name: nexus
      ports:
      - container_port: 8081
        protocol: TCP
      volumeMounts:
        - mountPath: /nexus-data
          name: nexus-volume-1
    volumes:
    - name: nexus-volume-1
      persistent_volume_claim:
        claim_name: nexus-volume-1
      test: false
      triggers:
      - type: ConfigChange

- name: create nexus route
  openshift_v1_route:
    name: nexus
    namespace: '{{ build_namespace }}'
    spec_port_target_port: 8081-tcp
    labels:
      app: nexus
      service: nexus
    to_name: nexus
  register: nexus_route

- name: wait for nexus server to be ready
  command: >
    curl -u admin:admin123 -k http://"{{ nexus_route.route.spec.host }}"/service/metrics/ping
  args:
    warn: no
  register: api_health
  until: api_health.stdout == 'pong'
  retries: 120
  delay: 1
  changed_when: false

- name: Initialize Nexus - Download setup_nexus3.sh
  get_url:
    url: https://raw.githubusercontent.com/wkulhanek/ocp_advanced_development_resources/master/nexus/setup_nexus3.sh
    dest: /tmp/setup_nexus3.sh
    mode: 0555

- name: Initialize Nexus - execute setup_nexus3.sh
  script: /tmp/setup_nexus3.sh admin admin123 http://"{{ nexus_route.route.spec.host }}"

## TODO: configure maven repository

## todo: create objects in both test and prod project
- name: create IS openshift-tasks (build)
  openshift_v1_image_stream:
    name: openshift-tasks
    namespace: '{{ build_namespace }}'
    labels:
      build: openshift-tasks
      template: openshift-tasks

- name: create IS openshift-tasks (test)
  openshift_v1_image_stream:
    name: openshift-tasks
    namespace: '{{ test_namespace }}'
    labels:
      build: openshift-tasks
      template: openshift-tasks

- name: create IS openshift-tasks (prod)
  openshift_v1_image_stream:
    name: openshift-tasks
    namespace: '{{ prod_namespace }}'
    labels:
      build: openshift-tasks
      template: openshift-tasks

- name: create BC openshift-tasks
  openshift_v1_build_config:
    name: openshift-tasks
    labels: 
      build: openshift-tasks
      template: openshift-tasks
    namespace: '{{ build_namespace }}'
    spec_successful_builds_history_limit: 1
    spec_failed_builds_history_limit: 1    
    spec_output_to_kind: ImageStreamTag
    spec_output_to_name: openshift-tasks:latest
    spec_run_policy: Serial
    spec_source_git_uri: '{{ git_repo }}'
    spec_source_type: Git
    spec_strategy_type: Source
    spec_strategy_source_strategy_from_kind: ImageStreamTag
    spec_strategy_source_strategy_from_name: jboss-eap70-openshift:latest
    spec_strategy_source_strategy_from_namespace: openshift
    triggers:
    - type: ConfigChange
    - type: ImageChange

## TEST
- name: create openshift-tasks deployment config
  openshift_v1_deployment_config:
    name: openshift-tasks
    namespace: '{{ test_namespace }}'
    labels:
      app: openshift-tasks
      template: openshift-tasks
    replicas: 1
    selector:
      app: openshift-tasks
      deploymentconfig: openshift-tasks
    spec_template_metadata_labels:
      app: openshift-tasks
      deploymentconfig: openshift-tasks
      template: openshift-tasks
    containers:
    - env:
      image: openshift-tasks:ready-for-testing
      name: openshift-tasks
      ports:
      - container_port: 8080
        protocol: TCP
      volumeMounts:
        - mountPath: /nexus-data
          name: nexus-volume-1
      test: false
      triggers:
      - type: ConfigChange
      - type: ImageChange
      imageChangeParams:
        containerNames:
        - openshift-tasks
        from:
          kind: ImageStreamTag
          name: openshift-tasks:ready-for-testing
          namespace: "{{ test_namespace }}"

- name: create openshift-tasks service (test)
  k8s_v1_service:
    name: openshift-tasks
    namespace: '{{ test_namespace }}'
    labels:
      app: openshift-tasks
      template: openshift-tasks
    selector:
      app: openshift-tasks
      deploymentconfig: openshift-tasks
    ports:
      - name: 8080-tcp
        port: 8080
        target_port: 8080

- name: create openshift-tasks route (test)
  openshift_v1_route:
    name: openshift-tasks
    namespace: '{{ test_namespace }}'
    spec_port_target_port: 8080-tcp
    labels:
      app: openshift-tasks
      template: openshift-tasks
    to_name: openshift-tasks
  register: test_route

## PROD
- name: create openshift-tasks blue service (prod)
  k8s_v1_service:
    name: openshift-tasks-blue
    namespace: '{{ prod_namespace }}'
    labels:
      app: openshift-tasks-blue
      color: blue
      template: openshift-tasks
    selector:
      app: openshift-tasks-blue
      color: blue
      deploymentconfig: openshift-tasks-blue
    ports:
      - name: 8080-tcp
        port: 8080
        target_port: 8080
        protocol: TCP

- name: create openshift-tasks green service (prod)
  k8s_v1_service:
    name: openshift-tasks-green
    namespace: '{{ prod_namespace }}'
    labels:
      app: openshift-tasks-green
      color: green
      template: openshift-tasks
    selector:
      app: openshift-tasks-green
      color: green
      deploymentconfig: openshift-tasks-green
    ports:
      - name: 8080-tcp
        port: 8080
        target_port: 8080
        protocol: TCP

- name: create openshift-tasks green service (prod)
  k8s_v1_service:
    name: openshift-tasks
    namespace: '{{ prod_namespace }}'
    labels:
      app: openshift-tasks
      template: openshift-tasks
    selector:
      color: green
    ports:
      - name: 8080-tcp
        port: 8080
        target_port: 8080
        protocol: TCP

- name: create openshift-tasks route (prod)
  openshift_v1_route:
    name: openshift-tasks
    namespace: '{{ prod_namespace }}'
    spec_port_target_port: 8080-tcp
    labels:
      app: openshift-tasks
      template: openshift-tasks
    to_name: openshift-tasks
  register: prod_route

- name: create openshift-tasks deployment config (blue)
  openshift_v1_deployment_config:
    name: openshift-tasks-blue
    namespace: '{{ prod_namespace }}'
    labels:
      app: openshift-tasks-blue
      color: blue
      template: openshift-tasks
    replicas: 1
    selector:
      app: openshift-tasks-blue
      color: blue
      deploymentconfig: openshift-tasks-blue
    spec_template_metadata_labels:
      app: openshift-tasks-blue
      color: blue
      deploymentconfig: openshift-tasks-blue
      template: openshift-tasks
    containers:
    - env:
      image: openshift-tasks:ready-for-prod
      name: openshift-tasks-blue
      ports:
      - container_port: 8080
        protocol: TCP
    triggers:
    - type: ConfigChange
    - type: ImageChange
    imageChangeParams:
      containerNames:
      - openshift-tasks-blue
      from:
        kind: ImageStreamTag
        name: openshift-tasks:ready-for-prod
        namespace: "{{ prod_namespace }}"

- name: create openshift-tasks deployment config (green)
  openshift_v1_deployment_config:
    name: openshift-tasks-green
    namespace: '{{ prod_namespace }}'
    labels:
      app: openshift-tasks-green
      color: green
      template: openshift-tasks
    replicas: 1
    selector:
      app: openshift-tasks-green
      color: green
      deploymentconfig: openshift-tasks-green
    spec_template_metadata_labels:
      app: openshift-tasks-green
      color: green
      deploymentconfig: openshift-tasks-green
      template: openshift-tasks
    containers:
    - env:
      image: openshift-tasks:ready-for-prod
      name: openshift-tasks-green
      ports:
      - container_port: 8080
        protocol: TCP
    triggers:
    - type: ConfigChange
    - type: ImageChange
    imageChangeParams:
      containerNames:
      - openshift-tasks-green
      from:
        kind: ImageStreamTag
        name: openshift-tasks:ready-for-prod
        namespace: "{{ prod_namespace }}"

## Jenkins / Pipeline
- name: create jenkins pipeline
  openshift_v1_build_config:
    name: openshift-tasks-pipeline
    labels: 
      template: openshift-tasks
    namespace: '{{ build_namespace }}'
    spec_successful_builds_history_limit: 1
    spec_failed_builds_history_limit: 1
    spec_output_to_kind: ImageStreamTag
    spec_output_to_name: openshift-tasks:latest
    spec_run_policy: Serial
    spec_source_git_uri: '{{ git_repo }}'
    spec_source_type: Git
    spec_strategy_source_strategy_from_kind: "ImageStreamTag"
    spec_strategy_source_strategy_from_name: "jboss-eap70-openshift:latest"
    spec_strategy_source_strategy_from_namespace: "openshift"
    spec_strategy_type: JenkinsPipeline
    spec_strategy_jenkins_pipeline_strategy_jenkinsfile_path: Jenkinsfile
    spec_strategy_jenkins_pipeline_strategy_env:    
    - name: OPENSHIFT_IMAGE_STREAM
      value: openshift-tasks
    - name: OPENSHIFT_BUILD_CONFIG
      value: openshift-tasks
    - name: OPENSHIFT_SERVICE
      value: openshift-tasks
    - name: OPENSHIFT_DEPLOYMENT_CONFIG
      value: openshift-tasks
    - name: OPENSHIFT_BUILD_PROJECT
      value: '{{ build_namespace }}'
    - name: OPENSHIFT_TEST_ENVIRONMENT
      value: '{{ test_namespace }}'
    - name: OPENSHIFT_PROD_ENVIRONMENT
      value: '{{ prod_namespace }}'
    - name: OPENSHIFT_TEST_URL
      value: http://'{{ test_route.route.spec.host }}'
    - name: NEXUS_REPO_URL
      value: "{{ nexus_route.route.spec.host }}"
    - name: NEXUS_MIRROR_URL
      value: "{{ nexus_route.route.spec.host }}"
    - name: NEXUS_USER
      value: admin
    - name: NEXUS_PASSWORD
      value: admin123

- name: add admin role to jenkins serviceaccount (test)
  openshift_v1_role_binding:
    name: jenkins-is-admin
    namespace: '{{ test_namespace }}'
    labels:
      template: openshift-tasks
    roleRef:
      name: admin
    subjects:
    - kind: ServiceAccount
      name: jenkins
      namespace: '{{ build_namespace }}'
    userNames:
    - system:serviceaccount:'{{ build_namespace }}':jenkins

- name: add admin role to jenkins serviceaccount (prod)
  openshift_v1_role_binding:
    name: jenkins-is-admin
    namespace: '{{ prod_namespace }}'
    labels:
      template: openshift-tasks
    roleRef:
      name: admin
    subjects:
    - kind: ServiceAccount
      name: jenkins
      namespace: '{{ build_namespace }}'
    userNames:
    - system:serviceaccount:'{{ build_namespace }}':jenkins
